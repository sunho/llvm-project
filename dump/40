; ModuleID = 'incr_module_19.submodule.0x559e897efae12af1.ll'
source_filename = "incr_module_19"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@modmul = external global ptr, align 8

; Function Attrs: mustprogress noinline optnone uwtable
define dso_local void @_Z3fftPxixi(ptr noundef %a, i32 noundef %m, i64 noundef %omega, i32 noundef %MOD) #0 {
entry:
  %a.addr = alloca ptr, align 8
  %m.addr = alloca i32, align 4
  %omega.addr = alloca i64, align 8
  %MOD.addr = alloca i32, align 4
  %cur = alloca i64, align 8
  %i = alloca i32, align 4
  %even = alloca i64, align 8
  %odd = alloca i64, align 8
  store ptr %a, ptr %a.addr, align 8
  store i32 %m, ptr %m.addr, align 4
  store i64 %omega, ptr %omega.addr, align 8
  store i32 %MOD, ptr %MOD.addr, align 4
  %0 = load i32, ptr %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %a.addr, align 8
  %2 = load i32, ptr %m.addr, align 4
  %div = sdiv i32 %2, 2
  %3 = load ptr, ptr @modmul, align 8
  %4 = load i64, ptr %omega.addr, align 8
  %5 = load i64, ptr %omega.addr, align 8
  %6 = load i32, ptr %MOD.addr, align 4
  %call = call noundef i32 %3(i64 noundef %4, i64 noundef %5, i32 noundef %6), !call_id !6
  %conv = sext i32 %call to i64
  %7 = load i32, ptr %MOD.addr, align 4
  call void @_Z3fftPxixi(ptr noundef %1, i32 noundef %div, i64 noundef %conv, i32 noundef %7)
  %8 = load ptr, ptr %a.addr, align 8
  %9 = load i32, ptr %m.addr, align 4
  %div1 = sdiv i32 %9, 2
  %idx.ext = sext i32 %div1 to i64
  %add.ptr = getelementptr inbounds i64, ptr %8, i64 %idx.ext
  %10 = load i32, ptr %m.addr, align 4
  %div2 = sdiv i32 %10, 2
  %11 = load ptr, ptr @modmul, align 8
  %12 = load i64, ptr %omega.addr, align 8
  %13 = load i64, ptr %omega.addr, align 8
  %14 = load i32, ptr %MOD.addr, align 4
  %call3 = call noundef i32 %11(i64 noundef %12, i64 noundef %13, i32 noundef %14), !call_id !7
  %conv4 = sext i32 %call3 to i64
  %15 = load i32, ptr %MOD.addr, align 4
  call void @_Z3fftPxixi(ptr noundef %add.ptr, i32 noundef %div2, i64 noundef %conv4, i32 noundef %15)
  store i64 1, ptr %cur, align 8
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32, ptr %i, align 4
  %17 = load i32, ptr %m.addr, align 4
  %div5 = sdiv i32 %17, 2
  %cmp6 = icmp slt i32 %16, %div5
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load ptr, ptr %a.addr, align 8
  %19 = load i32, ptr %i, align 4
  %idxprom = sext i32 %19 to i64
  %arrayidx = getelementptr inbounds i64, ptr %18, i64 %idxprom
  %20 = load i64, ptr %arrayidx, align 8
  store i64 %20, ptr %even, align 8
  %21 = load ptr, ptr %a.addr, align 8
  %22 = load i32, ptr %i, align 4
  %23 = load i32, ptr %m.addr, align 4
  %div7 = sdiv i32 %23, 2
  %add = add nsw i32 %22, %div7
  %idxprom8 = sext i32 %add to i64
  %arrayidx9 = getelementptr inbounds i64, ptr %21, i64 %idxprom8
  %24 = load i64, ptr %arrayidx9, align 8
  store i64 %24, ptr %odd, align 8
  %25 = load i64, ptr %even, align 8
  %26 = load ptr, ptr @modmul, align 8
  %27 = load i64, ptr %cur, align 8
  %28 = load i64, ptr %odd, align 8
  %29 = load i32, ptr %MOD.addr, align 4
  %call10 = call noundef i32 %26(i64 noundef %27, i64 noundef %28, i32 noundef %29), !call_id !8
  %conv11 = sext i32 %call10 to i64
  %add12 = add nsw i64 %25, %conv11
  %30 = load i32, ptr %MOD.addr, align 4
  %conv13 = sext i32 %30 to i64
  %rem = srem i64 %add12, %conv13
  %31 = load ptr, ptr %a.addr, align 8
  %32 = load i32, ptr %i, align 4
  %idxprom14 = sext i32 %32 to i64
  %arrayidx15 = getelementptr inbounds i64, ptr %31, i64 %idxprom14
  store i64 %rem, ptr %arrayidx15, align 8
  %33 = load i64, ptr %even, align 8
  %34 = load ptr, ptr @modmul, align 8
  %35 = load i64, ptr %cur, align 8
  %36 = load i64, ptr %odd, align 8
  %37 = load i32, ptr %MOD.addr, align 4
  %call16 = call noundef i32 %34(i64 noundef %35, i64 noundef %36, i32 noundef %37), !call_id !9
  %conv17 = sext i32 %call16 to i64
  %sub = sub nsw i64 %33, %conv17
  %38 = load i32, ptr %MOD.addr, align 4
  %conv18 = sext i32 %38 to i64
  %add19 = add nsw i64 %sub, %conv18
  %39 = load i32, ptr %MOD.addr, align 4
  %conv20 = sext i32 %39 to i64
  %rem21 = srem i64 %add19, %conv20
  %40 = load ptr, ptr %a.addr, align 8
  %41 = load i32, ptr %i, align 4
  %42 = load i32, ptr %m.addr, align 4
  %div22 = sdiv i32 %42, 2
  %add23 = add nsw i32 %41, %div22
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds i64, ptr %40, i64 %idxprom24
  store i64 %rem21, ptr %arrayidx25, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %43 = load i32, ptr %i, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, ptr %i, align 4
  %44 = load ptr, ptr @modmul, align 8
  %45 = load i64, ptr %cur, align 8
  %46 = load i64, ptr %omega.addr, align 8
  %47 = load i32, ptr %MOD.addr, align 4
  %call26 = call noundef i32 %44(i64 noundef %45, i64 noundef %46, i32 noundef %47), !call_id !10
  %conv27 = sext i32 %call26 to i64
  store i64 %conv27, ptr %cur, align 8
  br label %for.cond, !llvm.loop !11

for.end:                                          ; preds = %for.cond, %if.then
  ret void
}

attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 18.0.0 (git@github.com:sunho/llvm-project.git 4e3adab12b509610d81502bb640accbaea39b9f9)"}
!6 = !{i32 1}
!7 = !{i32 2}
!8 = !{i32 3}
!9 = !{i32 4}
!10 = !{i32 5}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
