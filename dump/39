; ModuleID = 'incr_module_17.submodule.0x32b50ef5ffaa3abe.ll'
source_filename = "incr_module_17"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@modmul = external global ptr, align 8

; Function Attrs: mustprogress noinline optnone uwtable
define dso_local noundef i32 @_Z6binexpxxi(i64 noundef %a, i64 noundef %n, i32 noundef %MOD) #0 {
entry:
  %a.addr = alloca i64, align 8
  %n.addr = alloca i64, align 8
  %MOD.addr = alloca i32, align 4
  %res = alloca i64, align 8
  store i64 %a, ptr %a.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store i32 %MOD, ptr %MOD.addr, align 4
  store i64 1, ptr %res, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, ptr %n.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i64, ptr %n.addr, align 8
  %and = and i64 %1, 1
  %tobool1 = icmp ne i64 %and, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %2 = load ptr, ptr @modmul, align 8
  %3 = load i64, ptr %res, align 8
  %4 = load i64, ptr %a.addr, align 8
  %5 = load i32, ptr %MOD.addr, align 4
  %call = call noundef i32 %2(i64 noundef %3, i64 noundef %4, i32 noundef %5), !call_id !6
  %conv = sext i32 %call to i64
  store i64 %conv, ptr %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %6 = load ptr, ptr @modmul, align 8
  %7 = load i64, ptr %a.addr, align 8
  %8 = load i64, ptr %a.addr, align 8
  %9 = load i32, ptr %MOD.addr, align 4
  %call2 = call noundef i32 %6(i64 noundef %7, i64 noundef %8, i32 noundef %9), !call_id !7
  %conv3 = sext i32 %call2 to i64
  store i64 %conv3, ptr %a.addr, align 8
  %10 = load i64, ptr %n.addr, align 8
  %div = sdiv i64 %10, 2
  store i64 %div, ptr %n.addr, align 8
  br label %while.cond, !llvm.loop !8

while.end:                                        ; preds = %while.cond
  %11 = load i64, ptr %res, align 8
  %conv4 = trunc i64 %11 to i32
  ret i32 %conv4
}

attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 18.0.0 (git@github.com:sunho/llvm-project.git 4e3adab12b509610d81502bb640accbaea39b9f9)"}
!6 = !{i32 1}
!7 = !{i32 2}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.mustprogress"}
